(function () {
  window.DENO_DOC_SEARCH_INDEX = {"kind":"search","nodes":[{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"JWKToMultikey","file":".","doc":"Convert a JWK Key pair to Multikeys. This function decodes the JWK keys, finds out which binary key it encodes\nand, converts the key to the multikey versions depending on the exact curve.\n\nNote that the code does not check (yet?) all combination of JWK pairs and fields for possible errors, only\nthose that would lead to error in this package. E.g., it does not check whether the x (and possibly y) values\nare identical in the secret and private JWK keys.\n\nWorks for `ecdsa` (both `P-384` and `P-256`), and `eddsa`.\n","url":"././~/JWKToMultikey.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"cryptoToMultikey","file":".","doc":"Convert a Crypto Key pair to Multikeys. This function exports the cryptokeys into a JWK Key pair,\nand uses the `JWKToMultikey` function.\n\nWorks for `ecdsa` (both `P-384` and `P-256`), and `eddsa`.\n\nNote that, because WebCrypto methods are asynchronous, so is this function.\n","url":"././~/cryptoToMultikey.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"multikeyToCrypto","file":".","doc":"Convert a multikey pair to Web Crypto. This function decodes the multikey data into JWK using the\n`multikeyToJWK` function, and imports the resulting keys into Web Crypto.\n\nWorks for `ecdsa` (both `P-384` and `P-256`), and `eddsa`.\n\nNote that, because WebCrypto methods are asynchronous, so is this function.\n","url":"././~/multikeyToCrypto.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"multikeyToJWK","file":".","doc":"Convert a multikey pair to JWK. This function decodes the multikey data\ninto a binary buffer, checks the preambles and invokes the crypto specific converter functions \n(depending on the preamble values) that do the final conversion from the binary data to JWK.\n\nWorks for `ecdsa` (both `P-384` and `P-256`), and `eddsa`.\n","url":"././~/multikeyToJWK.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"ClassToDecoder","file":"lib/common.ts","doc":"Type definition for the table mapping curves to their decoder functions (i.e., mapping the Multikey to JWK).","url":"./lib/common.ts/~/ClassToDecoder.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"ClassToEncoder","file":"lib/common.ts","doc":"Type definition for the table mapping curves to their encoder functions (i.e., mapping the JWK to Multikey).","url":"./lib/common.ts/~/ClassToEncoder.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"ClassToPreamble","file":"lib/common.ts","doc":"Type definition for the table mapping preambles to a specific curve.","url":"./lib/common.ts/~/ClassToPreamble.html","deprecated":false},{"kind":[{"char":"E","kind":"Enum","title":"Enum"}],"name":"CryptoCurves","file":"lib/common.ts","doc":"Names for the various crypto curves","url":"./lib/common.ts/~/CryptoCurves.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"CryptoKeyData","file":"lib/common.ts","doc":"This is an internal type, used for the implementation: return the crypto curve and type from a multikey preamble.\n\nSo far, I have not yet found a way to encode that in a simple table, hence the separate function.","url":"./lib/common.ts/~/CryptoKeyData.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"CryptoKeyData.crCurve","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/CryptoKeyData.crCurve.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"CryptoKeyData.crType","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/CryptoKeyData.crType.html","deprecated":false},{"kind":[{"char":"E","kind":"Enum","title":"Enum"}],"name":"CryptoKeyTypes","file":"lib/common.ts","doc":"Names for the key types","url":"./lib/common.ts/~/CryptoKeyTypes.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"ECDSACurves","file":"lib/common.ts","doc":"List of possible ECDSA Curves. Having this here declaratively may make it easier if\nin the future, a new curve is added to the family (P-512)?","url":"./lib/common.ts/~/ECDSACurves.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"Ecdsa256Preambles","file":"lib/common.ts","doc":"Preamble for ECDSA `P-256`, a.k.a. `secp256r1` curve","url":"./lib/common.ts/~/Ecdsa256Preambles.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"Ecdsa384Preambles","file":"lib/common.ts","doc":"Preamble for ECDSA `P-384`, a.k.a. `secp384r1` curve","url":"./lib/common.ts/~/Ecdsa384Preambles.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"EddsaPreambles","file":"lib/common.ts","doc":"Preamble value for EDDSA, a.k.a. `ed25519` curve","url":"./lib/common.ts/~/EddsaPreambles.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"},{"char":"I","kind":"Interface","title":"Interface"}],"name":"JWKKeyPair","file":"lib/common.ts","doc":"Public/secret pair of JWK instances","url":"./lib/common.ts/~/JWKKeyPair.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JWKKeyPair.publicKey","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/JWKKeyPair.publicKey.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JWKKeyPair.privateKey","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/JWKKeyPair.privateKey.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JWKKeyPair.publicKey","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/JWKKeyPair.publicKey.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JWKKeyPair.privateKey","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/JWKKeyPair.privateKey.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"},{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Multibase","file":"lib/common.ts","doc":"Type for a Multibase\n\nOne day this could become a string with a fixed regexp...","url":"./lib/common.ts/~/Multibase.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"},{"char":"I","kind":"Interface","title":"Interface"}],"name":"Multikey","file":"lib/common.ts","doc":"Pair of keys in Multibase encoding. Using the field names as defined in the \n[Multikey specification](https://www.w3.org/TR/controller-document/#multikey).","url":"./lib/common.ts/~/Multikey.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Multikey.publicKeyMultibase","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/Multikey.publicKeyMultibase.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Multikey.secretKeyMultibase","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/Multikey.secretKeyMultibase.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Multikey.publicKeyMultibase","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/Multikey.publicKeyMultibase.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Multikey.secretKeyMultibase","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/Multikey.secretKeyMultibase.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"MultikeyBinary","file":"lib/common.ts","doc":"Same as the Multikey, but decoded and without the preambles. I.e., just the bare key values.","url":"./lib/common.ts/~/MultikeyBinary.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MultikeyBinary.public","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/MultikeyBinary.public.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MultikeyBinary.secret","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/MultikeyBinary.secret.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"MultikeyPreambles","file":"lib/common.ts","doc":"Each crypto class has two preambles, one for the public and one for the secret keys","url":"./lib/common.ts/~/MultikeyPreambles.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MultikeyPreambles.public","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/MultikeyPreambles.public.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MultikeyPreambles.secret","file":"lib/common.ts","doc":"","url":"./lib/common.ts/~/MultikeyPreambles.secret.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Preamble","file":"lib/common.ts","doc":"Type used for preambles, which are, so far, a single pair of numbers.","url":"./lib/common.ts/~/Preamble.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"classToDecoder","file":"lib/common.ts","doc":"What coder function must be used to convert from Multikey to JWK (data)?","url":"./lib/common.ts/~/classToDecoder.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"classToEncoder","file":"lib/common.ts","doc":"What coder function must be used to convert from JWK to Multikey?","url":"./lib/common.ts/~/classToEncoder.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"classToPreamble","file":"lib/common.ts","doc":"What preambles must be used for a Curve?","url":"./lib/common.ts/~/classToPreamble.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"preambleToCryptoData","file":"lib/common.ts","doc":"Classify the crypto key based on the multikey preamble characters that are at the start of the code. \nThese are two binary numbers, signalling the crypto category (`ecdsa` or `eddsa`) and, in the former case, \nthe additional reference to the exact curve.\n","url":"./lib/common.ts/~/preambleToCryptoData.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"JWKToMultikeyBinary","file":"lib/ecdsa.ts","doc":"Convert the Crypto values from JWK to the equivalent Multikey Pairs' binary data. \nThe final encoding, with preambles, are done in the general level.\n\nFor ECDSA, the compressed form must be calculated, by adding an extra byte signaling which of the \ntwo possible 'y' values are used.\n\n(The y value is set as optional in the signature but that is only to make TypeScript happy. A missing\nvalue generates an error)\n","url":"./lib/ecdsa.ts/~/JWKToMultikeyBinary.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"multikeyBinaryToJWK","file":"lib/ecdsa.ts","doc":"Convert the multikey values to their JWK equivalents. The final `x` and `d` values are encoded\nin base64 and then the relevant JWK structure are created\n\nFor EDDSA, this is a very straightforward operation by just encoding the values and plugging them into a\nconstant JWK structure. The interface is there to be reused by the ECDSA equivalent, which must \ndo some extra processing.\n","url":"./lib/ecdsa.ts/~/multikeyBinaryToJWK.html","deprecated":false}]};
})()